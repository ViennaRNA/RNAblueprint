# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package RNAdesign;
use base qw(Exporter);
use base qw(DynaLoader);
package RNAdesignc;
bootstrap RNAdesign;
package RNAdesign;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package RNAdesign;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package RNAdesign;

*initialize_library = *RNAdesignc::initialize_library;

############# Class : RNAdesign::IntVector ##############

package RNAdesign::IntVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( RNAdesign );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = RNAdesignc::new_IntVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *RNAdesignc::IntVector_size;
*empty = *RNAdesignc::IntVector_empty;
*clear = *RNAdesignc::IntVector_clear;
*push = *RNAdesignc::IntVector_push;
*pop = *RNAdesignc::IntVector_pop;
*get = *RNAdesignc::IntVector_get;
*set = *RNAdesignc::IntVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        RNAdesignc::delete_IntVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : RNAdesign::DependencyGraphMT ##############

package RNAdesign::DependencyGraphMT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( RNAdesign );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = RNAdesignc::new_DependencyGraphMT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        RNAdesignc::delete_DependencyGraphMT($self);
        delete $OWNER{$self};
    }
}

*get_sequence = *RNAdesignc::DependencyGraphMT_get_sequence;
*set_sequence = *RNAdesignc::DependencyGraphMT_set_sequence;
*mutate_local = *RNAdesignc::DependencyGraphMT_mutate_local;
*mutate_global = *RNAdesignc::DependencyGraphMT_mutate_global;
*mutate = *RNAdesignc::DependencyGraphMT_mutate;
*number_of_sequences = *RNAdesignc::DependencyGraphMT_number_of_sequences;
*number_of_connected_components = *RNAdesignc::DependencyGraphMT_number_of_connected_components;
*component_vertices = *RNAdesignc::DependencyGraphMT_component_vertices;
*special_vertices = *RNAdesignc::DependencyGraphMT_special_vertices;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package RNAdesign;

1;
